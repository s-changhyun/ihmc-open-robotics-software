buildscript {
   repositories {
      maven {
         url "https://plugins.gradle.org/m2/"
      }
   }
   dependencies {
      classpath "gradle.plugin.us.ihmc.gradle:ihmc-build:0.0.19"
      classpath "org.ajoberstar:gradle-git:1.4.0-rc.1"
      classpath "org.hidetake:gradle-ssh-plugin:2.1.1"
   }
}

apply plugin: "us.ihmc.gradle.ihmc-build"
apply plugin: "org.hidetake.ssh"
import org.ajoberstar.grgit.Grgit

if (!rootProject.name.equals('IHMCOpenRoboticsSoftware'))
{
   evaluationDependsOn(':IHMCOpenRoboticsSoftware')
}

sourceCompatibility = 1.8
version = "${getOpenRoboticsSoftwareProject().version}"
project.ext.fullVersion = "${getOpenRoboticsSoftwareProject().ext.fullVersion}"
project.ext.vcsUrl = "${getOpenRoboticsSoftwareProject().ext.vcsUrl}"
project.ext.licenseURL = "http://www.apache.org/licenses/LICENSE-2.0.txt"
project.ext.licenseName = "Apache License, Version 2.0"
project.ext.bintrayLicenseName = "Apache-2.0"

repositories ihmc.ihmcDefaultArtifactProxies()

repositories {
   mavenLocal()
   jcenter()
   mavenCentral()
   maven {
      url "http://artifactory.ihmc.us/artifactory/thirdparty/"
   }
   maven {
      url "http://artifactory.ihmc.us/artifactory/releases/"
   }
}

def strings = ['ihmc', 'robotics']
ihmc.configureForIHMCOpenSourceBintrayPublish(false, "mavenJava", "maven-release", strings)

dependencies {
   testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'us.ihmc', name: 'ihmc-continuous-integration-framework', version: '0.9.4'

   compile group: 'us.ihmc', name: 'euclid-core', version: '0.4.2'
   compile group: 'com.martiansoftware', name: 'jsap', version: '2.1'
   compile group: 'org.yaml', name: 'snakeyaml', version: '1.17' //1.11
   compile group: 'org.ejml', name: 'core', version: '0.30'
   compile group: 'org.ejml', name: 'simple', version: '0.30'
   compile group: 'org.ejml', name: 'dense64', version: '0.30'
   compile group: 'com.esotericsoftware.minlog', name: 'minlog', version: '1.2'
   compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
   compile group: 'us.ihmc.thirdparty.jinput', name: 'jinput', version: '160414'
   compile group: 'us.ihmc.thirdparty.jme', name: 'jme3-core', version: '3.1.0-internal4'
   compile group: 'org.ros.rosjava_bootstrap', name: 'message_generation', version: '0.2.1'
   compile group: 'org.ros.rosjava_messages', name: 'std_msgs', version: '0.5.9'
   compile group: 'us.ihmc', name: 'IHMCRealtime', version: '1.1.2'
   compile group: 'us.ihmc', name: 'IHMCRosControl', version: '0.5.0', changing: true

   compile ihmc.getProjectDependency(":IHMCCommunication")
   compile ihmc.getProjectDependency(":IHMCHumanoidRobotics")
   compile ihmc.getProjectDependency(":IHMCSystemIdentification")
   compile ihmc.getProjectDependency(":IHMCStateEstimation")
   compile ihmc.getProjectDependency(":CommonWalkingControlModules")
   compile ihmc.getProjectDependency(":IHMCAvatarInterfaces")
   compile ihmc.getProjectDependency(":IHMCJMonkeyEngineToolkit")
   compile ihmc.getProjectDependency(":IHMCROSTools")
   compile ihmc.getProjectDependency(":IHMCRobotDataLogger")
   compile ihmc.getProjectDependency(":ModelFileLoader")
   compile ihmc.getProjectDependency(":SensorProcessing")
   compile ihmc.getProjectDependency(":SimulationConstructionSet")
   compile ihmc.getProjectDependency(":IHMCPerception")
   compile ihmc.getProjectDependency(":IHMCWholeBodyController")
   compile ihmc.getProjectDependency(":IHMCJavaToolkit")
    compile ihmc.getProjectDependency(":IHMCJavaExtensions")
   compile ihmc.getProjectDependency(":IHMCRoboticsToolkit")
   compile ihmc.getProjectDependency(":IHMCGraphicsDescription")
   compile ihmc.getProjectDependency(":IHMCRobotDescription")
   compile ihmc.getProjectDependency(":IHMCRobotModels")
   compile ihmc.getProjectDependency(":IHMCRobotDataVisualizer")
   compile ihmc.getProjectDependency(":IHMCSimulationToolkit")

	testCompile ihmc.getProjectTestDependency(":IHMCRoboticsToolkit")
	testCompile ihmc.getProjectTestDependency(":IHMCJavaExtensions")
   testCompile ihmc.getProjectTestDependency(":IHMCAvatarInterfaces")
}

apply plugin: 'application'
applicationName = "IHMCValkyrieAPI"
mainClassName = "us.ihmc.valkyrie.ValkyrieROSAPISimulator"
applicationDefaultJvmArgs = ["-Xmx4g"]

startScripts {
   outputs.upToDateWhen { false }

   doLast {
      def simUnixScriptGazebo = file(outputDir.canonicalPath + "/IHMCValkyrieGazeboController")
      simUnixScriptGazebo.text = unixScript.text.replace("IHMCValkyrieAPI", "IHMCValkyrieGazeboController").replace("us.ihmc.valkyrie.ValkyrieROSAPISimulator", "us.ihmc.valkyrie.gazebo.ValkyrieGazeboControllerFactory")
      simUnixScriptGazebo.setExecutable(true)
   }
}

applicationDistribution.from(startScripts.outputDir) {
   into "bin"
}

remotes {
   valkyrieRealtimeComputer {
      host = project.hasProperty('valkyrie_link_ip') ? "${valkyrie_link_ip}" : "invalid"

      // Set the username and password in ~/.gradle/gradle.properties.
      user = project.hasProperty('valkyrie_realtime_username') ? "${valkyrie_realtime_username}" : "invalid"
      password = project.hasProperty('valkyrie_realtime_password') ? "${valkyrie_realtime_password}" : "invalid"

      knownHosts = allowAnyHosts
   }

   valkyrieNonRealtimeComputer {
      host = project.hasProperty('valkyrie_zelda_ip') ? "${valkyrie_zelda_ip}" : "invalid"

      // Set the username and password in ~/.gradle/gradle.properties.
      user = project.hasProperty('valkyrie_realtime_username') ? "${valkyrie_realtime_username}" : "invalid"
      password = project.hasProperty('valkyrie_realtime_password') ? "${valkyrie_realtime_password}" : "invalid"

      knownHosts = allowAnyHosts
   }
}

jar {
   List depend = []
   configurations.runtime.each {
      if (!it.name.contains("IHMCHumanoidOperatorInterface"))
      {
         depend.add('lib/' + it.name)
      }
   }

   manifest {
      attributes(
              "Created-By": "IHMC Gradle Build Script",
              "Implementation-Title": project.name,
              "Implementation-Version": project.version,
              "Implementation-Vendor": "IHMC",

              "Bundle-Name": project.name,
              "Bundle-Version": project.version,
              "Bundle-License": "${project.ext.licenseURL}",
              "Bundle-Vendor": "IHMC",
              'Class-Path': depend.join(' '))
   }
}

task deployLocal(dependsOn: jar) {
   def directory = 'valkyrie'

   doLast {
      def dest = new File(System.properties['user.home'], directory)
      def lib = new File(dest, 'lib')
      lib.deleteDir();
      lib.mkdirs();

      configurations.runtime.each {
         if (!it.name.contains("IHMCHumanoidOperatorInterface"))
         {
            def src = file(it)
            copy {
               from src
               into lib
            }
         }
      }

      copy {
         from jar.archivePath
         into dest
         rename { fileName -> "ValkyrieController.jar" }
      }
   }
}

task deploy(dependsOn: ['jar']) {
   def projectDir = project.buildscript.sourceFile.parent
   def directory = 'valkyrie'

   doLast {
      if (!project.hasProperty('valkyrie_realtime_username') || !project.hasProperty('valkyrie_realtime_password'))
      {
         throw new GradleException("Please set valkyrie_realtime_username and valkyrie_realtime_password in ~/.gradle/gradle.properties. See https://docs.gradle.org/current/userguide/build_environment.html#sec:gradle_properties_and_system_properties for more information.")
      }

      if (!project.hasProperty('valkyrie_link_ip') || !project.hasProperty('valkyrie_zelda_ip'))
      {
         throw new GradleException("Please set valkyrie_link_ip and valkyrie_zelda_ip in ~/.gradle/gradle.properties. See https://docs.gradle.org/current/userguide/build_environment.html#sec:gradle_properties_and_system_properties for more information.")
      }

      ssh.run {
         session(remotes.valkyrieRealtimeComputer) {
            execute("rm -rf " + directory + "/lib")
            execute("mkdir -p " + directory + "/lib")
            execute("mkdir -p " + directory + "/Configurations")

            configurations.runtime.each {
               put it, directory + '/lib'
            }

            put jar.archivePath, directory + '/ValkyrieController.jar'

            def scriptDir = new File(projectDir, "launchScripts/")
            def scriptDirCollection = files { scriptDir.listFiles() }
            put scriptDirCollection, directory

            scriptDirCollection.each {
               execute 'chmod 777 ' + directory + '/' + it.name
            }
         }

         session(remotes.valkyrieNonRealtimeComputer) {
            execute("rm -rf " + directory + "/lib")
            execute("mkdir -p " + directory + "/lib")
            execute("mkdir -p " + directory + "/Configurations")

            configurations.runtime.each {
               put it, directory + '/lib'
            }

            put jar.archivePath, directory + '/ValkyrieController.jar'

            def scriptDir = new File(projectDir, "launchScripts/")
            def scriptDirCollection = files { scriptDir.listFiles() }
            put scriptDirCollection, directory

            scriptDirCollection.each {
               execute 'chmod 777 ' + directory + '/' + it.name
            }
         }
      }
   }
}

task createRosJar(type: Jar) {
   def gitRepo;
   if (!project.parent.hasProperty("repo"))
   {
      gitRepo = Grgit.open(projectDir.canonicalFile.parent)
   }
   else
   {
      gitRepo = project.parent.repo
   }
   version = gitRepo.head().abbreviatedId;
   manifest {
      attributes 'Implementation-Title': 'ROSAPI',
              'Implementation-Version': version,
              'Main-Class': 'us.ihmc.valkyrie.OpenHumanoidsSimulator'
   }

   baseName = 'OpenHumanoidsSimulator'
   from({ configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }) {
      exclude "META-INF/*.SF"
      exclude "META-INF/*.DSA"
      exclude "META-INF/*.RSA"
      with jar
   }
}

task OH(type: Copy, dependsOn: [createRosJar]) {
   from createRosJar
   into "lib/"
}
