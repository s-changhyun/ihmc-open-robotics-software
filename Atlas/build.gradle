buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "gradle.plugin.us.ihmc.gradle:ihmc-build:0.0.19"
  }
}

apply plugin: "us.ihmc.gradle.ihmc-build"

if (!rootProject.name.equals('IHMCOpenRoboticsSoftware')) {
    evaluationDependsOn(':IHMCOpenRoboticsSoftware')
}

sourceCompatibility = 1.8
version = "${getOpenRoboticsSoftwareProject().version}"
project.ext.fullVersion = "${getOpenRoboticsSoftwareProject().ext.fullVersion}"
project.ext.vcsUrl = "${getOpenRoboticsSoftwareProject().ext.vcsUrl}"
project.ext.licenseURL = "http://www.apache.org/licenses/LICENSE-2.0.txt"
project.ext.licenseName = "Apache License, Version 2.0"
project.ext.bintrayLicenseName = "Apache-2.0"

repositories ihmc.ihmcDefaultArtifactProxies()

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven {
        url "http://artifactory.ihmc.us/artifactory/thirdparty/"
    }
   maven {
        url "http://artifactory.ihmc.us/artifactory/releases/"
   }
}

def strings = ['ihmc', 'robotics']
ihmc.configureForIHMCOpenSourceBintrayPublish(false, "mavenJava", "maven-release", strings)

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'com.thoughtworks.xstream', name: 'xstream', version: '1.4.7'

    compile group: 'us.ihmc', name: 'euclid-core', version: '0.4.2'
    compile group: 'org.georegression', name: 'georegression', version: '0.11'
    compile group: 'org.ddogleg', name: 'ddogleg', version: '0.7'
    compile group: 'org.apache.xmlgraphics', name: 'batik-dom', version: '1.7'
    compile group: 'org.apache.ant', name: 'ant', version: '1.9.0'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
    compile group: 'com.martiansoftware', name: 'jsap', version: '2.1'
    compile group: 'org.ros.rosjava_core', name: 'rosjava', version: '0.2.1'
    compile group: 'org.ejml', name: 'core', version: '0.30'
    compile group: 'org.ejml', name: 'dense64', version: '0.30'
    compile group: 'org.boofcv', name: 'io', version: '0.24.1'
    compile group: 'org.boofcv', name: 'ip', version: '0.24.1'
    compile group: 'org.boofcv', name: 'geo', version: '0.24.1'
    compile group: 'org.boofcv', name: 'calibration', version: '0.24.1'
    compile group: 'org.boofcv', name: 'visualize', version: '0.24.1'
    compile group: 'org.ros.rosjava_bootstrap', name: 'message_generation', version: '0.2.1'
    compile group: 'com.esotericsoftware.kryo', name: 'kryo', version: '2.20'
    compile group: 'us.ihmc.thirdparty.jme', name: 'jme3-core', version: '3.1.0-internal4'
    compile group: 'com.github.wendykierp', name: 'JTransforms', version: '3.1'
    compile group: 'org.ros.rosjava_messages', name: 'sensor_msgs', version: '1.11.7'
    compile group: 'org.ros.rosjava_messages', name: 'multisense_ros', version: '3.4.2'
    compile group: 'us.ihmc.thirdparty.org.opencv', name: 'opencv', version: '3.1.0-160510'
    compile 'org.ros.rosjava_messages:geometry_msgs:1.11.9'
    compile "org.boofcv:recognition:0.24.1"
    
    testCompile group: 'us.ihmc', name: 'ihmc-continuous-integration-framework', version: '0.9.4'

    compile ihmc.getProjectDependency(":IHMCHumanoidBehaviors")
    compile ihmc.getProjectDependency(":Vicon")
    compile ihmc.getProjectDependency(":CommonWalkingControlModules")
    compile ihmc.getProjectDependency(":IHMCAvatarInterfaces")
    compile ihmc.getProjectDependency(":IHMCJMonkeyEngineToolkit")
    compile ihmc.getProjectDependency(":IHMCHumanoidRobotics")
    compile ihmc.getProjectDependency(":IHMCCommunication")
    compile ihmc.getProjectDependency(":IHMCJavaToolkit")
    compile ihmc.getProjectDependency(":IHMCJavaExtensions")
    compile ihmc.getProjectDependency(":IHMCPerception")
    compile ihmc.getProjectDependency(":IHMCRoboticsToolkit")
    compile ihmc.getProjectDependency(":IHMCROSTools")
    compile ihmc.getProjectDependency(":IHMCWholeBodyController")
    compile ihmc.getProjectDependency(":IHMCRobotDataLogger")
    compile ihmc.getProjectDependency(":RobotiqHandDrivers")
    compile ihmc.getProjectDependency(":ModelFileLoader")
    compile ihmc.getProjectDependency(":SensorProcessing")
    compile ihmc.getProjectDependency(":SimulationConstructionSet")
    compile ihmc.getProjectDependency(":IHMCGraphicsDescription")
    compile ihmc.getProjectDependency(":IHMCRobotDescription")
    compile ihmc.getProjectDependency(":IHMCRobotModels")
    compile ihmc.getProjectDependency(":IHMCSimulationToolkit")
    compile ihmc.getProjectDependency(":IHMCRobotDataVisualizer")

	testCompile ihmc.getProjectTestDependency(":IHMCRoboticsToolkit")
	testCompile ihmc.getProjectTestDependency(":IHMCJavaExtensions")
    testCompile ihmc.getProjectTestDependency(":CommonWalkingControlModules")
    testCompile ihmc.getProjectTestDependency(":IHMCAvatarInterfaces")
    testCompile ihmc.getProjectTestDependency(":IHMCHumanoidRobotics")
    testCompile ihmc.getProjectTestDependency(":SensorProcessing")
    testCompile ihmc.getProjectTestDependency(":IHMCSimulationToolkit")
}

apply plugin: 'application'

applicationName = "IHMCAtlasAPI"
mainClassName = "us.ihmc.atlas.AtlasROSAPINetworkProcessor"
applicationDefaultJvmArgs = ["-Xmx4g"]

jar {
    manifest {
        attributes(
                "Created-By": "IHMC Gradle Build Script",
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor": "IHMC",

                "Bundle-Name": project.name,
                "Bundle-Version": project.version,
                "Bundle-License": "${project.ext.licenseURL}",
                "Bundle-Vendor": "IHMC")
    }
}

startScripts {
    outputs.upToDateWhen { false }

    doLast {
        def simUnixScriptDemo01 = file(outputDir.canonicalPath + "/${applicationName}SimulatorDemo01")
        simUnixScriptDemo01.text = unixScript.text.replace("IHMCAtlasAPI", "IHMCAtlasAPISimulator").replace("AtlasROSAPINetworkProcessor", "AtlasDemo01ROSAPISimulator")
        simUnixScriptDemo01.setExecutable(true)

        def simWindowsScriptDemo01 = file(outputDir.canonicalPath + "/${applicationName}SimulatorDemo01.bat")
        simWindowsScriptDemo01.text = windowsScript.text.replace("IHMCAtlasAPI", "IHMCAtlasAPISimulator").replace("AtlasROSAPINetworkProcessor", "AtlasDemo01ROSAPISimulator")

        def simUnixScriptFinals = file(outputDir.canonicalPath + "/${applicationName}SimulatorFinals")
        simUnixScriptFinals.text = unixScript.text.replace("IHMCAtlasAPI", "IHMCAtlasAPISimulator").replace("AtlasROSAPINetworkProcessor", "AtlasFinalsROSAPISimulator")
        simUnixScriptFinals.setExecutable(true)

        def simWindowsScriptFinals = file(outputDir.canonicalPath + "/${applicationName}SimulatorFinals.bat")
        simWindowsScriptFinals.text = windowsScript.text.replace("IHMCAtlasAPI", "IHMCAtlasAPISimulator").replace("AtlasROSAPINetworkProcessor", "AtlasFinalsROSAPISimulator")

        def simUnixScriptVisualizer = file(outputDir.canonicalPath + "/IHMCRemoteAtlasVisualizer")
        simUnixScriptVisualizer.text = unixScript.text.replace("IHMCAtlasAPI", "IHMCRemoteAtlasVisualizer").replace("AtlasROSAPINetworkProcessor", "RemoteAtlasVisualizer")
        simUnixScriptVisualizer.setExecutable(true)

        def simWindowsScriptVisualizer = file(outputDir.canonicalPath + "/IHMCRemoteAtlasVisualizer.bat")
        simWindowsScriptVisualizer.text = windowsScript.text.replace("IHMCAtlasAPI", "IHMCRemoteAtlasVisualizer").replace("AtlasROSAPINetworkProcessor", "RemoteAtlasVisualizer")

        def simUnixScriptLogger = file(outputDir.canonicalPath + "/IHMCLogger")
        simUnixScriptLogger.text = unixScript.text.replace("IHMCAtlasAPI", "IHMCLogger").replace("us.ihmc.atlas.AtlasROSAPINetworkProcessor", "us.ihmc.robotDataLogger.logger.YoVariableLoggerDispatcher")
        simUnixScriptLogger.setExecutable(true)

        def simWindowsScriptLogger = file(outputDir.canonicalPath + "/IHMCLogger.bat")
        simWindowsScriptLogger.text = windowsScript.text.replace("IHMCAtlasAPI", "IHMCLogger").replace("us.ihmc.atlas.AtlasROSAPINetworkProcessor", "us.ihmc.robotDataLogger.logger.YoVariableLoggerDispatcher")

        def simUnixScriptGazebo = file(outputDir.canonicalPath + "/IHMCAtlasGazeboController")
        simUnixScriptGazebo.text = unixScript.text.replace("IHMCAtlasAPI", "IHMCAtlasGazeboController").replace("us.ihmc.atlas.AtlasROSAPINetworkProcessor", "us.ihmc.atlas.gazebo.AtlasGazeboControllerFactory")
        simUnixScriptGazebo.setExecutable(true)

    }
}

applicationDistribution.from(startScripts.outputDir) {
    into "bin"
}
