buildscript {
   repositories {
      maven {
         url "https://plugins.gradle.org/m2/"
      }
   }
   dependencies {
      classpath "gradle.plugin.us.ihmc.gradle:ihmc-build:0.0.19"
      classpath "org.hidetake:gradle-ssh-plugin:2.1.1"
   }
}

apply plugin: "us.ihmc.gradle.ihmc-build"
apply plugin: "org.hidetake.ssh"

if (!rootProject.name.equals('IHMCOpenRoboticsSoftware'))
{
   evaluationDependsOn(':IHMCOpenRoboticsSoftware')
}

sourceCompatibility = 1.8

version = "${getOpenRoboticsSoftwareProject().version}"
project.ext.fullVersion = "${getOpenRoboticsSoftwareProject().ext.fullVersion}"
project.ext.vcsUrl = "${getOpenRoboticsSoftwareProject().ext.vcsUrl}"
project.ext.licenseURL = "http://www.apache.org/licenses/LICENSE-2.0.txt"
project.ext.licenseName = "Apache License, Version 2.0"
project.ext.bintrayLicenseName = "Apache-2.0"

repositories ihmc.ihmcDefaultArtifactProxies()

repositories {
   mavenLocal()
   jcenter()
   mavenCentral()
   maven {
      url "http://artifactory.ihmc.us/artifactory/thirdparty/"
   }
   maven {
      url "http://artifactory.ihmc.us/artifactory/releases/"
   }
}

def strings = ['ihmc', 'robotics']
ihmc.configureForIHMCOpenSourceBintrayPublish(false, "mavenJava", "maven-release", strings)

dependencies {
   testCompile group: 'junit', name: 'junit', version: '4.11'
   testCompile ihmc.getProjectTestDependency(":IHMCAvatarInterfaces")

   compile group: 'us.ihmc', name: 'euclid-core', version: '0.4.2'
   compile group: 'us.ihmc', name: 'IHMCRealtime', version: '1.1.2'
   compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
   compile group: 'us.ihmc.thirdparty.jinput', name: 'jinput', version: '160414'
   compile group: 'org.ejml', name: 'dense64', version: '0.30'
   compile group: 'org.ejml', name: 'core', version: '0.30'
   compile group: 'us.ihmc.thirdparty.jme', name: 'jme3-core', version: '3.1.0-internal4'
   compile group: 'com.martiansoftware', name: 'jsap', version: '2.1'
   compile group: 'org.bidib.jbidib.org.qbang.rxtx', name: 'rxtxcomm', version: '2.2'
    
    testCompile group: 'us.ihmc', name: 'ihmc-continuous-integration-framework', version: '0.9.4'

   compile ihmc.getProjectDependency(":IHMCCommunication")
   compile ihmc.getProjectDependency(":IHMCHumanoidRobotics")
   compile ihmc.getProjectDependency(":IHMCStateEstimation")
   compile ihmc.getProjectDependency(":CommonWalkingControlModules")
   compile ihmc.getProjectDependency(":IHMCAvatarInterfaces")
   compile ihmc.getProjectDependency(":IHMCJMonkeyEngineToolkit")
   compile ihmc.getProjectDependency(":ModelFileLoader")
   compile ihmc.getProjectDependency(":SensorProcessing")
   compile ihmc.getProjectDependency(":SimulationConstructionSet")
   compile ihmc.getProjectDependency(":IHMCRobotDataLogger")
   compile ihmc.getProjectDependency(":IHMCPerception")
   compile ihmc.getProjectDependency(":IHMCWholeBodyController")
   compile ihmc.getProjectDependency(":IHMCJavaToolkit")
    compile ihmc.getProjectDependency(":IHMCJavaExtensions")
   compile ihmc.getProjectDependency(":IHMCRoboticsToolkit")
   compile ihmc.getProjectDependency(":IHMCRobotDescription")
   compile ihmc.getProjectDependency(":IHMCRobotModels")
   compile ihmc.getProjectDependency(":IHMCRobotDataVisualizer")
   compile ihmc.getProjectDependency(":IHMCGraphicsDescription")
	testCompile ihmc.getProjectTestDependency(":IHMCRoboticsToolkit")
	testCompile ihmc.getProjectTestDependency(":IHMCJavaExtensions")
}

remotes {
   stepprController {
      host = '10.66.171.20' //CPU1
      // Set the username and password in ~/.gradle/gradle.properties.
      user = project.hasProperty('steppr_username') ? "${steppr_username}" : "invalid"
      password = project.hasProperty('steppr_password') ? "${steppr_password}" : "invalid"
      knownHosts = allowAnyHosts
   }
   wandererController {
      host = '10.66.171.21'
      // Set the username and password in ~/.gradle/gradle.properties.
      user = project.hasProperty('wanderer_username') ? "${wanderer_username}" : "invalid"
      password = project.hasProperty('wanderer_password') ? "${wanderer_password}" : "invalid"
      knownHosts = allowAnyHosts
   }
}

jar {
   List depend = []
   configurations.runtime.each {
      if (!it.name.contains("IHMCHumanoidOperatorInterface"))
      {
         depend.add('lib/' + it.name)
      }
   }
   manifest {
      attributes(
              'Created-By': 'IHMC Gradle Build Script',
              'Class-Path': depend.join(' '),
              "Implementation-Title": project.name,
              "Implementation-Version": project.version,
              "Implementation-Vendor": "IHMC",

              "Bundle-Name": project.name,
              "Bundle-Version": project.version,
              "Bundle-License": "${project.ext.licenseURL}",
              "Bundle-Vendor": "IHMC")
   }
}

task deploy(dependsOn: assemble) << {
   def rep;
   def scriptDir;
   def directory;

   if (!project.hasProperty("robot"))
   {
      throw new GradleException("No robot passed in. Pass in -Probot=[robot].");
   }
   else if ("$robot" == "steppr")
   {

      if (!project.hasProperty('steppr_username') || !project.hasProperty('steppr_password'))
      {
         throw new GradleException("Please set stepper_username and steppr_password in ~/.gradle/gradle.properties. See https://docs.gradle.org/current/userguide/build_environment.html#sec:gradle_properties_and_system_properties for more information.")
      }

      rep = remotes.stepprController
      scriptDir = new File("scripts/steppr");
      directory = "steppr"
   }
   else if ("$robot" == "wanderer")
   {
      if (!project.hasProperty('wanderer_username') || !project.hasProperty('wanderer_password'))
      {
         throw new GradleException("Please set wanderer_username and wanderer_password in ~/.gradle/gradle.properties. See https://docs.gradle.org/current/userguide/build_environment.html#sec:gradle_properties_and_system_properties for more information.")
      }

      rep = remotes.wandererController
      scriptDir = new File("scripts/wanderer");
      directory = "wanderer"
   }
   else
   {
      throw new GradleException("Invalid robot \"$robot\" passed in. Valid options are \"steppr\" and \"wanderer\"");
   }

   println "Trying ssh"
   
   ssh.run {
      session(rep) {
         execute 'mkdir -p ' + directory + '/lib'
         println "Adding Jars"
         configurations.runtime.each {
            put it, directory + '/lib'
         }

         put jar.archivePath, directory + '/AcsellController.jar'

         def scriptDirCollection = files { scriptDir.listFiles() }
         put scriptDirCollection, directory

         scriptDirCollection.each {
            execute 'chmod 777 ' + directory + '/' + it.name
         }
      }
   }
}
